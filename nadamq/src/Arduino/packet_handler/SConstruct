import distutils.sysconfig
from pprint import pprint
import re
import os
import warnings
import sys

import yaml
from path_helpers import path

import auto_config
from get_libs import get_lib
from git_util import GitUtil
from arduino_build import ArduinoBuildContext


def get_version_string():
    version = GitUtil(None).describe()
    branch = GitUtil(None).branch()
    if branch == "master":
        tags = ""
    else:
        tags = "-" + branch
    m = re.search('^v(?P<major>\d+)\.(?P<minor>\d+)(-(?P<micro>\d+))?', version)
    if m.group('micro'):
        micro = m.group('micro')
    else:
        micro = '0'
    return "%s.%s.%s%s" % (m.group('major'), m.group('minor'), micro, tags)


PYTHON_VERSION = "%s.%s" % (sys.version_info[0],
                            sys.version_info[1])

env = Environment()

SOFTWARE_VERSION = get_version_string()
Export('SOFTWARE_VERSION')

Import('PYTHON_LIB')

nanopb_home = path('~/.virtualenvs/md/src/nanopb').expand()

context = ArduinoBuildContext(ARGUMENTS)
arduino_hex = context.build(extra_sources=[path(p).abspath() for p in
                                           ('../../crc_common.cpp',
                                            '../../packet_actions.cpp',
                                            'simple.pb.c')] +
                                            nanopb_home.files('*code.c'),
                            register_upload=True,
                            env_dict={'CPPPATH': [nanopb_home.abspath(),
                                                  path('../../..').abspath(),
                                                  path('../..').abspath(),
                                                  path('.').abspath()]})
