# Based on grammar generated by [abnfgen][1] at Mon Mar 24 05:50:55 2014
# Sources:
#       core
#       ../../packet-abnf_grammar.txt
#
# [1]: http://www.2p.cz/en/abnf_gen/
%%{
    # write your name
    machine packet_grammar;

    alphtype unsigned char;

    # generated rules, define required actions
    ALPHA = 0x41..0x5a | 0x61..0x7a;
    BIT = "0" | "1";
    CHAR = 0x01..0x7f;
    CR = "\r";
    LF = "\n";
    CRLF = CR LF;
    CTL = 0x00..0x1f | 0x7f;
    DIGIT = 0x30..0x39;
    DQUOTE = "\"";
    HEXDIG = DIGIT | "A"i | "B"i | "C"i | "D"i | "E"i | "F"i;
    HTAB = "\t";
    SP = " ";
    WSP = SP | HTAB;
    LWSP = ( WSP | ( CRLF WSP ) )*;
    OCTET = 0x00..0xff;
    VCHAR = 0x21..0x7e;

    startflag = "|"{3};
    iuid = OCTET{2};
    type = OCTET;
    length = OCTET;
    payload = OCTET*;
    crc = OCTET{2};

    # Action hints:
    #
    #  - `@`: Triggered for first byte of match
    #  - `$`: Triggered for every byte of match
    #  - `%`: Triggered for last byte of match
    header = (iuid >id_start $id_octet_received)
             (type @type_received)
             (length @length_received);

    process_payload := (
        payload >payload_start $payload_byte_received
    );

    # instantiate machine rules
    main := (
        (startflag $err(packet_err) @startflag_received)
        (header $err(packet_err) @{ fcall process_payload; } %payload_end)
        (crc $err(packet_err) >crc_start $crc_byte_received @crc_received)
    );
}%%
